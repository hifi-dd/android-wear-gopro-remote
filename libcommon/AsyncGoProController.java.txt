/*package com.hmsoft.libcommon.gopro;

import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;

public class AsyncGoProController extends GoProController {

    private static final String TAG = "AsyncGoProController";
    private Handler fMainThreadHandler;
    private HandlerThread fExecutorThread;
    private Handler fWorkHandler;

    public AsyncGoProController(String cameraAddress, String password) {
        super(cameraAddress, password);
        initThreadsHandler();
    }

    public AsyncGoProController(String password) {
        super(password);
        initThreadsHandler();
    }

    private void initThreadsHandler() {
        if(!Looper.getMainLooper().getThread().equals(Thread.currentThread())) {
            throw new RuntimeException("AsyncGoProController constructor called in non-UI thread.");
        }
        fMainThreadHandler = new Handler();
        fExecutorThread = new HandlerThread("com.hmsoft.AsyncGoProControllerThread");
        fExecutorThread.start();
        Looper looper = fExecutorThread.getLooper();
        fWorkHandler = new Handler(looper);
    }

    public void getCameraStatus(final UpdateStatusListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final GoProStatus status = AsyncGoProController.super.getStatus();
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCameraStatus(status);
						}
					});
				}
            }
        });
    }

    public void getRawStatus(final UpdateRawStatusListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final byte[] status = AsyncGoProController.super.getRawStatus();
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCameraStatusRaw(status);
						}
					});
				}
            }
        });
    }
	
	public void getLastStatus(final UpdateRawStatusListener listener) {
		if(GoProStatus.LastCameraStatus != null) {
			if(listener != null) {
				fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCameraStatusRaw(GoProStatus.LastCameraStatus);
						}
					});
			}	
			return;
		}
		
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final byte[] status = AsyncGoProController.super.getLastStatus();
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCameraStatusRaw(status);
						}
					});
				}
            }
        });
    }

    public void getCameraName(final GetCameraNameResultListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final String name = AsyncGoProController.super.getCameraName();
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCameraName(name);
						}
					});
				}
            }
        });
    }

    public void shutter(final boolean on, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.shutter(on);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void turnOn(final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.turnOn();
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void turnOff(final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.turnOff();
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setCameraMode(final byte cameraMode, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setCameraMode(cameraMode);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setVideoMode(final byte videoMode, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setVideoMode(videoMode);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setOrientationUpDown(final boolean up, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setOrientationUpDown(up);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setTimelapseInterval(final byte interval, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setTimelapseInterval(interval);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setVolume(final byte volume, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setVolume(volume);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setLeds(final byte leds, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setLeds(leds);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setSpotMeter(final boolean on, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setSpotMeter(on);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setOnScreenDisplay(final boolean on, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setOnScreenDisplay(on);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void setPreviewOn(final boolean on, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.setPreviewOn(on);
				if(listener != null) {
					fMainThreadHandler.post(new Runnable() {
						@Override
						public void run() {
							listener.goProCommandDone(result);
						}
					});
				}
            }
        });
    }

    public void locate(final boolean on, final CommandDoneListener listener) {
        fWorkHandler.post(new Runnable() {
            @Override
            public void run() {
                final boolean result = AsyncGoProController.super.locate(on);
                if(listener != null) {
                    fMainThreadHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            listener.goProCommandDone(result);
                        }
                    });
                }
            }
        });
    }

    public interface UpdateStatusListener {
        public void goProCameraStatus(GoProStatus status);
    }

    public interface UpdateRawStatusListener {
        public void goProCameraStatusRaw(byte[] status);
    }

    public interface GetCameraNameResultListener {
        public void goProCameraName(String cameraName);
    }

    public interface CommandDoneListener {
        public void goProCommandDone(boolean successful);
    }
}
*/